/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as UsersRouteRouteImport } from './routes/users/route'
import { Route as SessionsRouteRouteImport } from './routes/sessions/route'
import { Route as HowlsRouteRouteImport } from './routes/howls/route'
import { Route as AgentsRouteRouteImport } from './routes/agents/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as HowlsIndexRouteImport } from './routes/howls/index'
import { Route as AgentsIndexRouteImport } from './routes/agents/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'
import { Route as SessionsSessionIdRouteImport } from './routes/sessions/$sessionId'
import { Route as HowlsHowlIdRouteImport } from './routes/howls/$howlId'
import { Route as AgentsCreateRouteImport } from './routes/agents/create'
import { Route as AgentsAgentUsernameRouteImport } from './routes/agents/$agentUsername'

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsRouteRoute = SessionsRouteRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => rootRouteImport,
} as any)
const HowlsRouteRoute = HowlsRouteRouteImport.update({
  id: '/howls',
  path: '/howls',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsRouteRoute = AgentsRouteRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HowlsIndexRoute = HowlsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HowlsRouteRoute,
} as any)
const AgentsIndexRoute = AgentsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AgentsRouteRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)
const SessionsSessionIdRoute = SessionsSessionIdRouteImport.update({
  id: '/$sessionId',
  path: '/$sessionId',
  getParentRoute: () => SessionsRouteRoute,
} as any)
const HowlsHowlIdRoute = HowlsHowlIdRouteImport.update({
  id: '/$howlId',
  path: '/$howlId',
  getParentRoute: () => HowlsRouteRoute,
} as any)
const AgentsCreateRoute = AgentsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AgentsRouteRoute,
} as any)
const AgentsAgentUsernameRoute = AgentsAgentUsernameRouteImport.update({
  id: '/$agentUsername',
  path: '/$agentUsername',
  getParentRoute: () => AgentsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/howls': typeof HowlsRouteRouteWithChildren
  '/sessions': typeof SessionsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/agents/$agentUsername': typeof AgentsAgentUsernameRoute
  '/agents/create': typeof AgentsCreateRoute
  '/howls/$howlId': typeof HowlsHowlIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/howls/': typeof HowlsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sessions': typeof SessionsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/agents/$agentUsername': typeof AgentsAgentUsernameRoute
  '/agents/create': typeof AgentsCreateRoute
  '/howls/$howlId': typeof HowlsHowlIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/agents': typeof AgentsIndexRoute
  '/howls': typeof HowlsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/howls': typeof HowlsRouteRouteWithChildren
  '/sessions': typeof SessionsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/redirect': typeof RedirectRoute
  '/agents/$agentUsername': typeof AgentsAgentUsernameRoute
  '/agents/create': typeof AgentsCreateRoute
  '/howls/$howlId': typeof HowlsHowlIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/howls/': typeof HowlsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/howls'
    | '/sessions'
    | '/users'
    | '/redirect'
    | '/agents/$agentUsername'
    | '/agents/create'
    | '/howls/$howlId'
    | '/sessions/$sessionId'
    | '/users/$userId'
    | '/agents/'
    | '/howls/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sessions'
    | '/users'
    | '/redirect'
    | '/agents/$agentUsername'
    | '/agents/create'
    | '/howls/$howlId'
    | '/sessions/$sessionId'
    | '/users/$userId'
    | '/agents'
    | '/howls'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/howls'
    | '/sessions'
    | '/users'
    | '/redirect'
    | '/agents/$agentUsername'
    | '/agents/create'
    | '/howls/$howlId'
    | '/sessions/$sessionId'
    | '/users/$userId'
    | '/agents/'
    | '/howls/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRouteRoute: typeof AgentsRouteRouteWithChildren
  HowlsRouteRoute: typeof HowlsRouteRouteWithChildren
  SessionsRouteRoute: typeof SessionsRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  RedirectRoute: typeof RedirectRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/howls': {
      id: '/howls'
      path: '/howls'
      fullPath: '/howls'
      preLoaderRoute: typeof HowlsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/howls/': {
      id: '/howls/'
      path: '/'
      fullPath: '/howls/'
      preLoaderRoute: typeof HowlsIndexRouteImport
      parentRoute: typeof HowlsRouteRoute
    }
    '/agents/': {
      id: '/agents/'
      path: '/'
      fullPath: '/agents/'
      preLoaderRoute: typeof AgentsIndexRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/sessions/$sessionId': {
      id: '/sessions/$sessionId'
      path: '/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof SessionsSessionIdRouteImport
      parentRoute: typeof SessionsRouteRoute
    }
    '/howls/$howlId': {
      id: '/howls/$howlId'
      path: '/$howlId'
      fullPath: '/howls/$howlId'
      preLoaderRoute: typeof HowlsHowlIdRouteImport
      parentRoute: typeof HowlsRouteRoute
    }
    '/agents/create': {
      id: '/agents/create'
      path: '/create'
      fullPath: '/agents/create'
      preLoaderRoute: typeof AgentsCreateRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
    '/agents/$agentUsername': {
      id: '/agents/$agentUsername'
      path: '/$agentUsername'
      fullPath: '/agents/$agentUsername'
      preLoaderRoute: typeof AgentsAgentUsernameRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
  }
}

interface AgentsRouteRouteChildren {
  AgentsAgentUsernameRoute: typeof AgentsAgentUsernameRoute
  AgentsCreateRoute: typeof AgentsCreateRoute
  AgentsIndexRoute: typeof AgentsIndexRoute
}

const AgentsRouteRouteChildren: AgentsRouteRouteChildren = {
  AgentsAgentUsernameRoute: AgentsAgentUsernameRoute,
  AgentsCreateRoute: AgentsCreateRoute,
  AgentsIndexRoute: AgentsIndexRoute,
}

const AgentsRouteRouteWithChildren = AgentsRouteRoute._addFileChildren(
  AgentsRouteRouteChildren,
)

interface HowlsRouteRouteChildren {
  HowlsHowlIdRoute: typeof HowlsHowlIdRoute
  HowlsIndexRoute: typeof HowlsIndexRoute
}

const HowlsRouteRouteChildren: HowlsRouteRouteChildren = {
  HowlsHowlIdRoute: HowlsHowlIdRoute,
  HowlsIndexRoute: HowlsIndexRoute,
}

const HowlsRouteRouteWithChildren = HowlsRouteRoute._addFileChildren(
  HowlsRouteRouteChildren,
)

interface SessionsRouteRouteChildren {
  SessionsSessionIdRoute: typeof SessionsSessionIdRoute
}

const SessionsRouteRouteChildren: SessionsRouteRouteChildren = {
  SessionsSessionIdRoute: SessionsSessionIdRoute,
}

const SessionsRouteRouteWithChildren = SessionsRouteRoute._addFileChildren(
  SessionsRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRouteRoute: AgentsRouteRouteWithChildren,
  HowlsRouteRoute: HowlsRouteRouteWithChildren,
  SessionsRouteRoute: SessionsRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  RedirectRoute: RedirectRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
