/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SessionsIndexRouteImport } from './routes/sessions/index'
import { Route as HowlsIndexRouteImport } from './routes/howls/index'
import { Route as AgentsIndexRouteImport } from './routes/agents/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'
import { Route as SessionsSessionIdRouteImport } from './routes/sessions/$sessionId'
import { Route as HowlsHowlIdRouteImport } from './routes/howls/$howlId'
import { Route as AgentsCreateRouteImport } from './routes/agents/create'
import { Route as AgentsAgentUsernameRouteImport } from './routes/agents/$agentUsername'

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsIndexRoute = SessionsIndexRouteImport.update({
  id: '/sessions/',
  path: '/sessions/',
  getParentRoute: () => rootRouteImport,
} as any)
const HowlsIndexRoute = HowlsIndexRouteImport.update({
  id: '/howls/',
  path: '/howls/',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsIndexRoute = AgentsIndexRouteImport.update({
  id: '/agents/',
  path: '/agents/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsSessionIdRoute = SessionsSessionIdRouteImport.update({
  id: '/sessions/$sessionId',
  path: '/sessions/$sessionId',
  getParentRoute: () => rootRouteImport,
} as any)
const HowlsHowlIdRoute = HowlsHowlIdRouteImport.update({
  id: '/howls/$howlId',
  path: '/howls/$howlId',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsCreateRoute = AgentsCreateRouteImport.update({
  id: '/agents/create',
  path: '/agents/create',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsAgentUsernameRoute = AgentsAgentUsernameRouteImport.update({
  id: '/agents/$agentUsername',
  path: '/agents/$agentUsername',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/redirect': typeof RedirectRoute
  '/agents/$agentUsername': typeof AgentsAgentUsernameRoute
  '/agents/create': typeof AgentsCreateRoute
  '/howls/$howlId': typeof HowlsHowlIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/agents': typeof AgentsIndexRoute
  '/howls': typeof HowlsIndexRoute
  '/sessions': typeof SessionsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/redirect': typeof RedirectRoute
  '/agents/$agentUsername': typeof AgentsAgentUsernameRoute
  '/agents/create': typeof AgentsCreateRoute
  '/howls/$howlId': typeof HowlsHowlIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/agents': typeof AgentsIndexRoute
  '/howls': typeof HowlsIndexRoute
  '/sessions': typeof SessionsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/redirect': typeof RedirectRoute
  '/agents/$agentUsername': typeof AgentsAgentUsernameRoute
  '/agents/create': typeof AgentsCreateRoute
  '/howls/$howlId': typeof HowlsHowlIdRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/howls/': typeof HowlsIndexRoute
  '/sessions/': typeof SessionsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/redirect'
    | '/agents/$agentUsername'
    | '/agents/create'
    | '/howls/$howlId'
    | '/sessions/$sessionId'
    | '/users/$userId'
    | '/agents'
    | '/howls'
    | '/sessions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/redirect'
    | '/agents/$agentUsername'
    | '/agents/create'
    | '/howls/$howlId'
    | '/sessions/$sessionId'
    | '/users/$userId'
    | '/agents'
    | '/howls'
    | '/sessions'
  id:
    | '__root__'
    | '/'
    | '/redirect'
    | '/agents/$agentUsername'
    | '/agents/create'
    | '/howls/$howlId'
    | '/sessions/$sessionId'
    | '/users/$userId'
    | '/agents/'
    | '/howls/'
    | '/sessions/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RedirectRoute: typeof RedirectRoute
  AgentsAgentUsernameRoute: typeof AgentsAgentUsernameRoute
  AgentsCreateRoute: typeof AgentsCreateRoute
  HowlsHowlIdRoute: typeof HowlsHowlIdRoute
  SessionsSessionIdRoute: typeof SessionsSessionIdRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
  AgentsIndexRoute: typeof AgentsIndexRoute
  HowlsIndexRoute: typeof HowlsIndexRoute
  SessionsIndexRoute: typeof SessionsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/': {
      id: '/sessions/'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/howls/': {
      id: '/howls/'
      path: '/howls'
      fullPath: '/howls'
      preLoaderRoute: typeof HowlsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/': {
      id: '/agents/'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/$sessionId': {
      id: '/sessions/$sessionId'
      path: '/sessions/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof SessionsSessionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/howls/$howlId': {
      id: '/howls/$howlId'
      path: '/howls/$howlId'
      fullPath: '/howls/$howlId'
      preLoaderRoute: typeof HowlsHowlIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/create': {
      id: '/agents/create'
      path: '/agents/create'
      fullPath: '/agents/create'
      preLoaderRoute: typeof AgentsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/$agentUsername': {
      id: '/agents/$agentUsername'
      path: '/agents/$agentUsername'
      fullPath: '/agents/$agentUsername'
      preLoaderRoute: typeof AgentsAgentUsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RedirectRoute: RedirectRoute,
  AgentsAgentUsernameRoute: AgentsAgentUsernameRoute,
  AgentsCreateRoute: AgentsCreateRoute,
  HowlsHowlIdRoute: HowlsHowlIdRoute,
  SessionsSessionIdRoute: SessionsSessionIdRoute,
  UsersUserIdRoute: UsersUserIdRoute,
  AgentsIndexRoute: AgentsIndexRoute,
  HowlsIndexRoute: HowlsIndexRoute,
  SessionsIndexRoute: SessionsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
